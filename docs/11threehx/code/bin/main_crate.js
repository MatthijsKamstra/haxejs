// Generated by Haxe 4.0.0+ef18b627e
(function ($global) { "use strict";
var MainCrate = function() {
	console.log("src/MainCrate.hx:19:","Example");
	this.init();
	this.animate(0);
};
MainCrate.main = function() {
	var main = new MainCrate();
};
MainCrate.prototype = {
	init: function() {
		this.camera = new THREE.PerspectiveCamera(70,window.innerWidth / window.innerHeight,1,1000);
		this.camera.position.z = 400;
		this.scene = new THREE.Scene();
		var texture = new THREE.TextureLoader().load("crate.gif");
		var geometry = new THREE.BoxGeometry(200,200,200);
		var material = new THREE.MeshBasicMaterial({ map : texture});
		this.mesh = new THREE.Mesh(geometry,material);
		this.scene.add(this.mesh);
		this.renderer = new THREE.WebGLRenderer();
		this.renderer.setPixelRatio(window.devicePixelRatio);
		this.renderer.setSize(window.innerWidth,window.innerHeight);
		window.document.body.appendChild(this.renderer.domElement);
		window.addEventListener("resize",$bind(this,this.onWindowResize),false);
	}
	,onWindowResize: function() {
		this.camera.aspect = window.innerWidth / window.innerHeight;
		this.camera.updateProjectionMatrix();
		this.renderer.setSize(window.innerWidth,window.innerHeight);
	}
	,animate: function(f) {
		window.requestAnimationFrame($bind(this,this.animate));
		this.mesh.rotation.x += 0.005;
		this.mesh.rotation.y += 0.01;
		this.renderer.render(this.scene,this.camera);
	}
};
var $_;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
MainCrate.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=main_crate.js.map